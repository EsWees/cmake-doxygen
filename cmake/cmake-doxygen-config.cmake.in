@PACKAGE_INIT@

SET(@PROJECT_NAME@_FOUND TRUE)
MARK_AS_ADVANCED(@PROJECT_NAME@_FOUND)

FIND_PACKAGE(Doxygen REQUIRED)

FIND_PATH(PLANTUML_PATH "plantuml.jar"
PATHS
	"/usr"
	"/usr/local"
	"/usr/share/plantuml"
PATH_SUFFIXES
	"bin"
	"lib"
	"share"
DOC
	"PlantUML path (plantuml.jar)")
MARK_AS_ADVANCED(PLANTUML_PATH)

SET(@PROJECT_NAME@_plantuml_FOUND CACHE BOOL "@PROJECT_NAME@ with PlantUML")
MARK_AS_ADVANCED(@PROJECT_NAME@_plantuml_FOUND)
IF(PLANTUML_PATH STREQUAL "PLANTUML_PATH-NOTFOUND")
	SET(@PROJECT_NAME@_plantuml_FOUND FALSE)
ELSE()
	SET(@PROJECT_NAME@_plantuml_FOUND TRUE)
ENDIF()

CHECK_REQUIRED_COMPONENTS(@PROJECT_NAME@)

IF(NOT @PROJECT_NAME@_FOUND)
	RETURN()
ENDIF()

MESSAGE(STATUS "Found @PROJECT_NAME@: ${CMAKE_CURRENT_LIST_DIR} (found version \"${@PROJECT_NAME@_VERSION}\")")

IF(@PROJECT_NAME@_FIND_COMPONENTS)
	MESSAGE(STATUS "Found the following @PROJECT_NAME@ components:")

	FOREACH(comp ${@PROJECT_NAME@_FIND_COMPONENTS})
		MESSAGE(STATUS "   ${comp}")
	ENDFOREACH()
ENDIF()

FUNCTION(DOXYGEN)
	# single value options
	SET(VAL_LIST
		DOT_FONTSIZE
		DOT_IMAGE_FORMAT
		OUTPUT_DIRECTORY
		TAB_SIZE
		USE_MDFILE_AS_MAINPAGE
	)

	# multiple value options
	SET(VALS_LIST
		EXCLUDE_SYMBOLS
		PREDEFINED
	)

	# special options (processing this separately)
	SET(SPEC_LIST
		EXCLUDE_DIRS
		NO
		SOURCES
		TARGET
		YES
	)

	CMAKE_PARSE_ARGUMENTS(DOXY		# prefix
		""				# options
		"${VAL_LIST}"			# single value options
		"${SPEC_LIST};${VALS_LIST}"	# multiple value options
		${ARGN})

	# verify required arguments
	IF(NOT DOXY_TARGET)
		MESSAGE(FATAL_ERROR "Please specify TARGET!")
	ENDIF()

	IF(NOT DOXY_SOURCES)
		MESSAGE(FATAL_ERROR "Please specify SOURCES!")
	ENDIF()

	IF(NOT DOXY_OUTPUT_DIRECTORY)
		MESSAGE(FATAL_ERROR "Please specify OUTPUT_DIRECTORY!")
	ENDIF()

	# fix sources, if mainpage in markdown
	IF(DOXY_USE_MDFILE_AS_MAINPAGE)
		LIST(APPEND DOXY_SOURCES "${DOXY_USE_MDFILE_AS_MAINPAGE}")
	ENDIF()

	# common Doxygen settings
	SET(DOXYFILE "${DOXY_OUTPUT_DIRECTORY}.Doxyfile")
	FILE(WRITE "${DOXYFILE}" "PROJECT_NAME = ${PROJECT_NAME}\n")
	FILE(APPEND "${DOXYFILE}"
		"STRIP_FROM_INC_PATH = ${CMAKE_CURRENT_SOURCE_DIR}\n")
	FILE(APPEND "${DOXYFILE}"
		"STRIP_FROM_PATH = ${CMAKE_CURRENT_SOURCE_DIR}\n")

	IF(PROJECT_VERSION)
		FILE(APPEND "${DOXYFILE}"
			"PROJECT_NUMBER = ${PROJECT_VERSION}\n")
	ENDIF()

	STRING(TIMESTAMP DATE "%Y.%m.%d" UTC)
	FILE(APPEND "${DOXYFILE}" "ALIASES += date=\"${DATE}\"\n")

	STRING(TIMESTAMP TIME "%H:%M:%S" UTC)
	FILE(APPEND "${DOXYFILE}" "ALIASES += time=\"${TIME}\"\n")

	STRING(TIMESTAMP NOW "%Y.%m.%d %H:%M:%S" UTC)
	FILE(APPEND "${DOXYFILE}" "ALIASES += now=\"${NOW}\"\n")

	IF(@PROJECT_NAME@_plantuml_FOUND)
		FILE(APPEND "${DOXYFILE}"
			"PLANTUML_JAR_PATH = \"${PLANTUML_PATH}\"\n")
	ENDIF()

	FOREACH(OPT ${DOXY_YES})
		FILE(APPEND "${DOXYFILE}" "${OPT} = YES\n")
	ENDFOREACH()

	FOREACH(OPT ${DOXY_NO})
		FILE(APPEND "${DOXYFILE}" "${OPT} = NO\n")
	ENDFOREACH()

	IF(DOXY_EXCLUDE_DIRS)
		FILE(APPEND "${DOXYFILE}" "EXCLUDE =")
		FOREACH(EXCLUDE ${DOXY_EXCLUDE_DIRS})
			FILE(APPEND "${DOXYFILE}" " \"${EXCLUDE}\"")
		ENDFOREACH()
		FILE(APPEND "${DOXYFILE}" "\n")
	ENDIF()

	FOREACH(OPT ${VAL_LIST})
		FILE(APPEND "${DOXYFILE}" "${OPT} = ${DOXY_${OPT}}\n")
	ENDFOREACH()

	FOREACH(OPT ${VALS_LIST})
		FILE(APPEND "${DOXYFILE}" "${OPT} =")

		# write values into single line
		FOREACH(VAL ${DOXY_${OPT}})
			FILE(APPEND "${DOXYFILE}" " ${VAL}")
		ENDFOREACH()

		FILE(APPEND "${DOXYFILE}" "\n")
	ENDFOREACH()

	FILE(APPEND "${DOXYFILE}" "INPUT =")
	FOREACH(SRC ${DOXY_SOURCES})
		FILE(APPEND "${DOXYFILE}" " \"${SRC}\"")
	ENDFOREACH()
	FILE(APPEND "${DOXYFILE}" "\n")

	FILE(MAKE_DIRECTORY "${DOXY_OUTPUT_DIRECTORY}")

	ADD_CUSTOM_COMMAND(OUTPUT "${DOXY_OUTPUT_DIRECTORY}.chk"
	COMMAND
		"${DOXYGEN_EXECUTABLE}" "${DOXYFILE}"
	COMMAND
		echo ${DOXY_TARGET} > "${DOXY_OUTPUT_DIRECTORY}.chk"
	DEPENDS
		"${DOXYFILE}"
		${DOXY_SOURCES}
	COMMENT
		"Generating documentation for ${PROJECT_NAME}")

	ADD_CUSTOM_TARGET("${DOXY_TARGET}" ALL
	WORKING_DIRECTORY
		"${DOXY_OUTPUT_DIRECTORY}"
	COMMENT
		"Generating documentation for ${PROJECT_NAME}"
	SOURCES
		"${DOXY_OUTPUT_DIRECTORY}.chk"
	)
ENDFUNCTION()
